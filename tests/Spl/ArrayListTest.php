<?php

namespace Spl;

/**
 * Test class for ArrayList.
 * Generated by PHPUnit on 2011-12-20 at 00:50:44.
 */
class ArrayListTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var ArrayList
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new ArrayList;
    }

    /**
     * @covers {className}::{origMethodName}
     */
    public function testOffsetSet() {
        $this->object[] = 0;
        $this->object[0] = 1;
    }

    /**
     * @depends testOffsetSet
     * @covers {className}::{origMethodName}
     */
    public function testOffsetGet() {
        $this->object[] = 1;
        $this->assertEquals($this->object[0], 1);
    }

    /**
     * @covers {className}::offsetGet
     * @expectedException OutOfRangeException
     */
    public function testOffsetGetOutOfRange() {
        $stdClass = new \StdClass();
        $this->object[$stdClass];
    }

    /**
     * @covers {className}::offsetGet
     * @expectedException OutOfBoundsException
     */
    public function testOffsetGetOutOfBounds() {
        $this->object[1];
    }

    /**
     * @depends testOffsetSet
     * @covers {className}::{origMethodName}
     */
    public function testOffsetExists() {
        $this->assertFalse($this->object->offsetExists(0));
        $this->object[] = 0;
        $this->assertTrue($this->object->offsetExists(0));
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testOffsetUnset().
     */
    public function testOffsetUnset() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @depends testOffsetSet
     * @covers {className}::{origMethodName}
     */
    public function testCount() {
        $this->assertEquals(count($this->object), 0);
        $this->object[] = 0;
        $this->assertEquals(count($this->object), 1);
    }

    /**
     * @depends testOffsetSet
     * @covers {className}::{origMethodName}
     */
    public function testIsEmpty() {
        $this->assertTrue($this->object->isEmpty());
        $this->object[] = 0;
        $this->assertFalse($this->object->isEmpty());
    }

    /**
     * @depends testOffsetSet
     * @depends testIsEmpty
     * @covers {className}::{origMethodName}
     */
    public function testClear() {
        $this->object[] = 0;
        $this->object->clear();
        $this->assertTrue($this->object->isEmpty());
    }

    /**
     * @depends testOffsetSet
     * @covers {className}::{origMethodName}
     */
    public function testContains() {
        $this->assertFalse($this->object->contains(0));
        $this->object[] = 0;
        $this->assertTrue($this->object->contains(0));
        $this->assertTrue($this->object->contains('0'));

        $this->object[] = new \StdClass();
        $this->object[1]->foo = 'bar';
        $foo = new \StdClass();
        $this->assertFalse($this->object->contains($foo));
        $foo->foo = 'bar';
        $this->assertTrue($this->object->contains($foo));
    }

    public function testToArray() {
        $this->assertEquals(array(), $this->object->toArray());
        $this->object[] = 1;
        $this->assertEquals(array(1), $this->object->toArray());
    }

    public function testMap() {
        $this->object[] = 1;
        $test = $this->object->map(function($value) { return $value * 2; });
        $this->assertEquals(1, $this->object->count());
        $this->assertEquals(1, $test->count());
        $this->assertTrue($this->object->contains(1));
        $this->assertTrue($test->contains(2));
    }

    public function testFilter() {
        $this->object[] = 1;
        $this->object[] = 2;
        $test = $this->object->filter(function($value) { return $value % 2 == 1; });
        $this->assertEquals(2, $this->object->count());
        $this->assertEquals(1, $test->count());
        $this->assertTrue($this->object->contains(1));
        $this->assertTrue($this->object->contains(2));
        $this->assertTrue($test->contains(1));
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testGetIterator().
     */
    public function testGetIterator() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}

?>
