<?php
namespace Spl;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-07-16 at 17:08:21.
 */
class ArrayStackTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var ArrayStack
     */
    protected $stack;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->stack = new ArrayStack;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
    }

    /**
     * @covers Spl\ArrayStack::pushBack
     * @covers Spl\ArrayStack::count
     */
    public function testPush() {
        $this->stack->pushBack(0);
        $this->assertCount(1, $this->stack);

        $this->stack->pushBack(0);
        $this->assertCount(2, $this->stack);
    }

    /**
     * @covers Spl\ArrayStack::popBack
     * @depends testPush
     */
    public function testPop() {
        $inItem = 0;
        $this->stack->pushBack($inItem);

        $outItem = $this->stack->popBack();

        $this->assertEquals($inItem, $outItem);
        $this->assertCount(0, $this->stack);
    }

    /**
     * @covers Spl\ArrayStack::popBack
     * @expectedException \Spl\EmptyException
     */
    public function testPopException() {
        $this->stack->popBack();
    }

    /**
     * @covers Spl\ArrayStack::peekBack
     * @depends testPush
     */
    public function testPeek() {
        $inItem = 0;
        $this->stack->pushBack($inItem);

        $peekedItem = $this->stack->peekBack();

        $this->assertEquals($inItem, $peekedItem);
        $this->assertCount(1, $this->stack);

        $secondInItem = 1;
        $this->stack->pushBack($secondInItem);
        $secondPeekedItem = $this->stack->peekBack();

        $this->assertEquals($secondInItem, $secondPeekedItem);
        $this->assertCount(2, $this->stack);
    }

    /**
     * @covers Spl\ArrayStack::peekBack
     * @expectedException \Spl\EmptyException
     */
    public function testPeekException() {
        $this->stack->peekBack();
    }

    /**
     * @covers Spl\ArrayStack::clear
     * @depends testPush
     */
    public function testClear() {
        $this->stack->pushBack(0);

        $this->stack->clear();
        $this->assertCount(0, $this->stack);
    }

    /**
     * @covers Spl\ArrayStack::contains
     * @depends testPush
     */
    public function testContains() {
        $item = 0;
        $this->assertFalse($this->stack->contains($item));
        $this->stack->pushBack($item);
        $this->assertTrue($this->stack->contains($item));
    }

    /**
     * @covers Spl\ArrayStack::isEmpty
     * @depends testPush
     */
    public function testIsEmpty() {
        $this->assertTrue($this->stack->isEmpty());
        $this->stack->pushBack(0);
        $this->assertFalse($this->stack->isEmpty());
    }

}
